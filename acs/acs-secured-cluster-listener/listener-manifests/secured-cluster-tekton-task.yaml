---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: secured-cluster-tekton-task
  namespace: global-policies
  labels:
    app.kubernetes.io/version: "0.3"
  annotations:
    tekton.dev/categories: rhacs
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/tags: rhacs
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le,linux/arm64"
spec:
  description: >-
    Find and secure RHACM Managed clusters with RHACS

  params:
  - name: MANAGED_CLUSTER_NAME
    description: Cluster we would like to secure with RHACS.
    default: ""
  - name: MANAGED_CLUSTER_SERVER_ADDRESS
    description: Cluster we would like to secure with RHACS.
    default: ""
  - name: BASE_IMAGE
    description: Image we will use to run commands.
    default: registry.redhat.io/ubi8/ubi:8.6-855
  - name: RHACS_REPO
    description: RHACS CHART REPO
    default: https://mirror.openshift.com/pub/rhacs/charts/
  - name: HELM_BINARY
    description: Helm Version to be used
    default: helm-v3.9.4-linux-amd64.tar.gz
  - name: OC_URL_CHANNEL
    description: OC channel to be used to get oc
    default: stable
  - name: CENTRAL_HTPASSWD_SECRET_NAME
    description: HTPASSWD Secret for central
    default: acs-password
  workspaces:
  - name: source
    optional: true
  steps:
  - name: push
    image: $(params.BASE_IMAGE)
    workingDir: $(workspaces.source.path)
    script: |
      #Install Basic Tools
      yum install -y tar curl wget buildah && \
      wget https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/$(params.OC_URL_CHANNEL)/openshift-client-linux.tar.gz && \
      tar -xvf openshift-client-linux.tar.gz

      #Get Central Route
      echo "Get Central Route" && \
      export CENTRAL_ROUTE=$(./oc get route/central -n stackrox -o jsonpath='{.spec.host}') && \
      
      #Get Central Secret
      echo "Get Central Secret" && \
      export CENTRAL_SECRET=$(./oc get secret $(params.CENTRAL_HTPASSWD_SECRET_NAME) -n stackrox -o jsonpath='{.data.password}' | base64 -d ) && \

      #Download Roxctl
      curl -s -k -H "Content-Type: application/json" -u "admin:${CENTRAL_SECRET}" "https://$CENTRAL_ROUTE/api/cli/download/roxctl-linux" --output ./roxctl  > /dev/null; echo "Getting roxctl"
      chmod +x ./roxctl > /dev/null

      #Tag Base Image for cluster specific embedded image
      ./oc tag --source=docker $(params.BASE_IMAGE) global-policies/ubi-buildah:latest

      echo "Get Managed Clusters" && \
      export MC=$(./oc get managedclusters --no-headers | awk '{print $1}'| grep -v local-cluster)

      for mc in $MC
      do
        #Create RHACS Bundle
        echo "Create/Get RHACS Bundle for $mc"
        bundlename=$(roxctl central init-bundles list -p ${CENTRAL_SECRET} -e "$CENTRAL_ROUTE:443" --insecure 2>/dev/null | grep -o $mc)
        if [ "$bundlename" = "$mc" ]
        then
           roxctl central init-bundles revoke "${bundlename}" -p "${CENTRAL_SECRET}" -e "$CENTRAL_ROUTE:443" --insecure
        fi
        #curl -k -o ./bundle.json -X GET -u "admin:${CENTRAL_SECRET}" -H "Content-Type: application/json" https://${CENTRAL_ROUTE}/v1/cluster-init/init-bundles && \
        ./roxctl -p $CENTRAL_SECRET -e "$CENTRAL_ROUTE:443" central init-bundles generate $mc --output "./$mc-bundle.yaml"

        echo "Build Image for $mc"
        buildah_image=$(buildah from image-registry.openshift-image-registry.svc:5000/global-policies/ubi-buildah:latest)
        buildah run $buildah_image /bin/bash -c "yum install -y tar curl wget buildah"
        buildah run $buildah_image /bin/bash -c "mkdir /app-run && cd /app-run"
        buildah run $buildah_image /bin/bash -c "wget https://get.helm.sh/$(params.HELM_BINARY)"
        buildah run $buildah_image /bin/bash -c "tar -xvf $(params.HELM_BINARY) && ./linux-amd64/helm repo add rhacs $(params.RHACS_REPO)"
        buildah copy $buildah_image ./$mc-bundle.yaml /app-run/bundle.yaml
        buildah copy $buildah_image ./roxctl /app-run/roxctl    
        buildah config --env CLUSTER_NAME="$mc" --env CENTRAL_ROUTE=$CENTRAL_ROUTE $buildah_image  

        if [ $(./oc get managedclusters/$mc -o jsonpath='{.status.clusterClaims[?(@.name=="version.openshift.io")]}']) != "" ]
        then
           echo "Non-Openshift Cluster"
           buildah run $buildah_image /bin/bash -c "echo '''/app-run/linux-amd64/helm install -n stackrox \
           --create-namespace stackrox-secured-cluster-services rhacs/secured-cluster-services \
           -f /app-run/bundle.json \ 
           --set clusterName=\$CLUSTER_NAME \
           --set centralEndpoint=\$CENTRAL_ROUTE''' > /app-run/entrypoint.sh"
           echo "Entrypoint Script Output"
           buildah run $buildah_image /bin/bash -c "cat /app-run/entrypoint.sh"
        else
           echo "Openshift Cluster"
           buildah run $buildah_image /bin/bash -c "echo '''/app-run/linux-amd64/helm install -n stackrox \
           --create-namespace stackrox-secured-cluster-services rhacs/secured-cluster-services \
           -f /app-run/bundle.json \ 
           --set clusterName=\$CLUSTER_NAME \
           --set centralEndpoint=\$CENTRAL_ROUTE --set scanner.disable=false''' > /app-run/entrypoint.sh"
           echo "Entrypoint Script Output"
           buildah run $buildah_image /bin/bash -c "cat /app-run/entrypoint.sh"
        fi
        buildah run $buildah_image /bin/bash -c "chgrp -R 0 /app-run && chmod -R g+rwX /app-run && chmod -R g=u /app-run"
        buildah config --workingdir /app-run --entrypoint /app-run/entrypoint.sh $buildah_image 
        buildah commit $buildah_image image-registry.openshift-image-registry.svc:5000/global-policies/$mc:latest
        buildah push --tls-verify=false image-registry.openshift-image-registry.svc:5000/global-policies/$mc:latest       
      done
    securityContext:
      privileged: true
    volumeMounts:
    - name: varlibcontainers
      mountPath: /var/lib/containers

  volumes:
  - name: varlibcontainers
    emptyDir: {}